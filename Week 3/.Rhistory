knitr::opts_chunk$set(echo = TRUE)
library(plyr)
library(dplyr)
library(arules)
install.packages('arules')
library(plyr)
library(dplyr)
library(arules)
bd = read.csv("/Users/timtieng/Library/CloudStorage/OneDrive-Personal/Desktop/Masters in Applied Data Science/IST-707 Machine Learning/Week 3/bankdata_csv_all.csv")
str(bd)
bd$age <- cut(bd$age, breaks = c(0,10,20,30,40,50,60,Inf),labels=c("child","teens","twenties","thirties","fourties","fifties","old"))
min_income <- min(bd$income)
max_income <- max(bd$income)
bins = 3
width=(max_income - min_income)/bins;
bd$income = cut(bd$income, breaks=seq(min_income, max_income, width))
bd$children=factor(bd$children)
bd$married=dplyr::recode(bd$married, YES="married=YES", NO="married=NO")
bd$car=dplyr::recode(bd$car, YES="car=YES", NO="car=NO")
bd$save_act=dplyr::recode(bd$save_act, YES="save_act=YES", NO="save_act=NO")
bd$current_act=dplyr::recode(bd$current_act, YES="current_act=YES", NO="current_act=NO")
bd$mortgage=dplyr::recode(bd$mortgage, YES="mortgage=YES", NO="mortgage=NO")
bd$pep=dplyr::recode(bd$pep, YES="pep=YES", NO="pep=NO")
myRules = apriori(bd, parameter = list(supp = 0.001, conf = 0.9, maxlen = 3))
library(readr)
library(dplyr)
library(arules)
bankdata <- read_csv("/Users/timtieng/Library/CloudStorage/OneDrive-Personal/Desktop/Masters in Applied Data Science/IST-707 Machine Learning/Week 3/bankdata_csv_all.csv")
# drop the id variable
# convert categorical variables to factor
# discretize numeric variables
bankdata <- bankdata %>%
select(-id) %>%
mutate_if(is.character, funs(as.factor)) %>%
mutate_if(is.numeric, funs(discretize))
# generate rules
rules <- apriori(bankdata, parameter = list(supp = 0.001, conf = 0.9, maxlen = 4))
library(RWeka)
install.packages('RWeka')
library(RWeka)
knitr::opts_chunk$set(echo = TRUE)
SortedRules_sup <- sort(transaction_rules, by="support", decreasing=TRUE)
bd = read.csv("/Users/byu/Desktop/Data/bankdata_csv_all.csv")
# install.packages('arules')
library(plyr)
library(dplyr)
library(arules)
bd = read.csv("/Users/byu/Desktop/Data/bankdata_csv_all.csv")
bd = read.csv("/Users/timtieng/Library/CloudStorage/OneDrive-Personal/Desktop/Masters in Applied Data Science/IST-707 Machine Learning/Week 3/bankdata_csv_all.csv")
str(bd)
bd$age <- cut(bd$age, breaks = c(0,10,20,30,40,50,60,Inf),labels=c("child","teens","twenties","thirties","fourties","fifties","old"))
bd$age <- cut(bd$age, breaks = c(0,10,20,30,40,50,60,Inf),labels=c("child","teens","twenties","thirties","fourties","fifties","old"))
bd$age <- cut(bd$age, breaks = c(0,10,20,30,40,50,60,Inf),labels=c("child","teens","twenties","thirties","fourties","fifties","old"))
bd$age <- cut(bd$age, breaks = c(0,10,20,30,40,50,60,Inf),labels=c("child","teens","twenties","thirties","fourties","fifties","old"))
bd = read.csv("/Users/timtieng/Library/CloudStorage/OneDrive-Personal/Desktop/Masters in Applied Data Science/IST-707 Machine Learning/Week 3/bankdata_csv_all.csv")
str(bd)
bd$age <- cut(bd$age, breaks = c(0,10,20,30,40,50,60,Inf),labels=c("child","teens","twenties","thirties","fourties","fifties","old"))
min_income <- min(bd$income)
max_income <- max(bd$income)
bins = 3
width=(max_income - min_income)/bins;
bd$income = cut(bd$income, breaks=seq(min_income, max_income, width))
min_income <- min(bd$income)
min_income <- min(bd$income)
bd$age <- cut(bd$age, breaks = c(0,10,20,30,40,50,60,Inf),labels=c("child","teens","twenties","thirties","fourties","fifties","old"))
# install.packages('arules')
library(plyr)
library(dplyr)
library(arules)
bd = read.csv("/Users/timtieng/Library/CloudStorage/OneDrive-Personal/Desktop/Masters in Applied Data Science/IST-707 Machine Learning/Week 3/bankdata_csv_all.csv")
str(bd)
bd$age <- cut(bd$age, breaks = c(0,10,20,30,40,50,60,Inf),labels=c("child","teens","twenties","thirties","fourties","fifties","old"))
min_income <- min(bd$income)
max_income <- max(bd$income)
bins = 3
width=(max_income - min_income)/bins;
bd$income = cut(bd$income, breaks=seq(min_income, max_income, width))
bd$children=factor(bd$children)
bd$married=dplyr::recode(bd$married, YES="married=YES", NO="married=NO")
bd$car=dplyr::recode(bd$car, YES="car=YES", NO="car=NO")
bd$save_act=dplyr::recode(bd$save_act, YES="save_act=YES", NO="save_act=NO")
bd$current_act=dplyr::recode(bd$current_act, YES="current_act=YES", NO="current_act=NO")
bd$mortgage=dplyr::recode(bd$mortgage, YES="mortgage=YES", NO="mortgage=NO")
bd$pep=dplyr::recode(bd$pep, YES="pep=YES", NO="pep=NO")
bd$married=dplyr::recode(bd$married, YES="married=YES", NO="married=NO")
bd$car=dplyr::recode(bd$car, YES="car=YES", NO="car=NO")
bd$save_act=dplyr::recode(bd$save_act, YES="save_act=YES", NO="save_act=NO")
bd$current_act=dplyr::recode(bd$current_act, YES="current_act=YES", NO="current_act=NO")
bd$mortgage=dplyr::recode(bd$mortgage, YES="mortgage=YES", NO="mortgage=NO")
bd$pep=dplyr::recode(bd$pep, YES="pep=YES", NO="pep=NO")
myRules = apriori(bd, parameter = list(supp = 0.001, conf = 0.9, maxlen = 3))
knitr::opts_chunk$set(echo = TRUE)
# Async 3.6 question - Calculate the lift of rules {A}->{D} and {D}->{A}
# Load the "arules" package
# install.packages("arules")
library(arules)
# Create the transaction dataset in a list format
transactions_list <- list(
c("A", "B", "D"),
c("A", "C", "D"),
c("A", "D", "E"),
c("B", "E", "F"),
c("B", "C", "D", "E", "F")
)
# Convert the list to a one-hot encoded matrix
transaction_matrix <- as(
transactions_list,
"transactions"
)
# Mine association rules using apriori
rules <- apriori(
transaction_matrix,
parameter = list(support = 0.2, confidence = 0.6, target = "rules")
)
# Filter the rules to get only the ones we are interested in
lift_rules <- subset(rules, subset = rhs %in% c("D", "A"))
# Display the lift rules
inspect(lift_rules)
lift_rules
# install.packages(arules)
# install.packages(arulesViz)
library(arules)
library(arulesViz)
groceries <- read.transactions("/Users/timtieng/Library/CloudStorage/OneDrive-Personal/Desktop/Masters in Applied Data Science/IST-707 Machine Learning/Week 3//groceries.csv", format="basket", sep="," )
itemFrequencyPlot(groceries,topN=20,type="absolute")
rules <- apriori(groceries, parameter = list(supp = 0.001, conf = 0.8))
options(digits=2)
inspect(rules[1:5])
rules<-sort(rules, by="confidence", decreasing=TRUE)
rules<-apriori(data=groceries, parameter=list(supp=0.001,conf = 0.08, minlen=2),
appearance = list(default="lhs",rhs="whole milk"),
control = list(verbose=F))
rules<-sort(rules, decreasing=TRUE,by='confidence')
inspect(rules[1:5])
rules<-apriori(data=groceries, parameter=list(supp=0.001,conf = 0.15,minlen=2),
appearance = list(default="rhs",lhs="whole milk"),
control = list(verbose=F))
rules<-sort(rules, decreasing=TRUE,by="confidence")
inspect(rules[1:5])
#plot(rules,method="graph",interactive=TRUE,shading=NA)
plot(rules,method="graph",interactive=TRUE,shading=NA)
