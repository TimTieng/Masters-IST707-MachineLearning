# Remove variables with only one level
# netflixUsersData <- netflixUsersData[, -c(2)]  # Remove Subscription.Type if it has only one level
# Build the logistic regression model
# model <- glm(Device ~ ., data = trainData, family = "binomial")
# Make predictions on the test set
# predictions <- predict(model, newdata = testData, type = "response")
# Convert probability predictions to device classes (e.g., Smartphone, Tablet, Smart TV, Laptop)
# predictedDevice <- ifelse(predictions > 0.5, "Smartphone", "Other")
# Evaluate the model
# confusionMatrix(table(predictedDevice, testData$Device))
# You can also use other evaluation metrics to assess the model's performance
# Device prediction
# Data preprocessing
# Convert categorical variables to factors
netflixUsersData$Subscription.Type <- as.factor(netflixUsersData$Subscription.Type)
netflixUsersData$Country <- as.factor(netflixUsersData$Country)
netflixUsersData$Gender <- as.factor(netflixUsersData$Gender)
# netflixUsersData$Plan.Duration <- as.factor(netflixUsersData$Plan.Duration)
# Split the data into training and testing sets
set.seed(123)  # for reproducibility
trainIndex <- createDataPartition(netflixUsersData$Device, p = 0.8,
list = FALSE,
times = 1)
trainData <- netflixUsersData[ trainIndex,]
testData <- netflixUsersData[-trainIndex,]
# Check levels of categorical variables
print(levels(netflixUsersData$Subscription.Type))
print(levels(netflixUsersData$Country))
print(levels(netflixUsersData$Gender))
print(levels(netflixUsersData$Plan.Duration))
# Remove the variable with one level
#netflixUsersData <- netflixUsersData[, -c("VariableName")]
# Remove variables with only one level
# netflixUsersData <- netflixUsersData[, -c(2)]  # Remove Subscription.Type if it has only one level
# Build the logistic regression model
model <- glm(Device ~ ., data = trainData, family = "binomial")
# Device prediction
# Data preprocessing
# Convert categorical variables to factors
netflixUsersData$Subscription.Type <- as.factor(netflixUsersData$Subscription.Type)
netflixUsersData$Country <- as.factor(netflixUsersData$Country)
netflixUsersData$Gender <- as.factor(netflixUsersData$Gender)
# netflixUsersData$Plan.Duration <- as.factor(netflixUsersData$Plan.Duration)
# Split the data into training and testing sets
set.seed(123)  # for reproducibility
trainIndex <- createDataPartition(netflixUsersData$Device, p = 0.8,
list = FALSE,
times = 1)
trainData <- netflixUsersData[ trainIndex,]
testData <- netflixUsersData[-trainIndex,]
# Check levels of categorical variables
print(levels(netflixUsersData$Subscription.Type))
print(levels(netflixUsersData$Country))
print(levels(netflixUsersData$Gender))
print(levels(netflixUsersData$Plan.Duration))
# Remove the variable with one level
netflixUsersData <- netflixUsersData[, -c("VariableName")]
# Device prediction
# Data preprocessing
# Convert categorical variables to factors
netflixUsersData$Subscription.Type <- as.factor(netflixUsersData$Subscription.Type)
netflixUsersData$Country <- as.factor(netflixUsersData$Country)
netflixUsersData$Gender <- as.factor(netflixUsersData$Gender)
# netflixUsersData$Plan.Duration <- as.factor(netflixUsersData$Plan.Duration)
# Split the data into training and testing sets
set.seed(123)  # for reproducibility
trainIndex <- createDataPartition(netflixUsersData$Device, p = 0.8,
list = FALSE,
times = 1)
trainData <- netflixUsersData[ trainIndex,]
testData <- netflixUsersData[-trainIndex,]
# Check levels of categorical variables
print(levels(netflixUsersData$Subscription.Type))
print(levels(netflixUsersData$Country))
print(levels(netflixUsersData$Gender))
print(levels(netflixUsersData$Plan.Duration))
# Remove the variable with one level
netflixUsersData <- netflixUsersData[, -c("Plan.Duration")]
# Device prediction
# Data preprocessing
# Convert categorical variables to factors
netflixUsersData$Subscription.Type <- as.factor(netflixUsersData$Subscription.Type)
netflixUsersData$Country <- as.factor(netflixUsersData$Country)
netflixUsersData$Gender <- as.factor(netflixUsersData$Gender)
# netflixUsersData$Plan.Duration <- as.factor(netflixUsersData$Plan.Duration)
# Split the data into training and testing sets
set.seed(123)  # for reproducibility
trainIndex <- createDataPartition(netflixUsersData$Device, p = 0.8,
list = FALSE,
times = 1)
trainData <- netflixUsersData[ trainIndex,]
testData <- netflixUsersData[-trainIndex,]
# Check levels of categorical variables
print(levels(netflixUsersData$Subscription.Type))
print(levels(netflixUsersData$Country))
print(levels(netflixUsersData$Gender))
print(levels(netflixUsersData$Plan.Duration))
# Remove the variable with one level
# Remove the "Plan.Duration" column
netflixUsersData <- subset(netflixUsersData, select = -Plan.Duration)
# Remove variables with only one level
# netflixUsersData <- netflixUsersData[, -c(2)]  # Remove Subscription.Type if it has only one level
# Build the logistic regression model
model <- glm(Device ~ ., data = trainData, family = "binomial")
# Device prediction
# Data preprocessing
# Convert categorical variables to factors
netflixUsersData$Subscription.Type <- as.factor(netflixUsersData$Subscription.Type)
netflixUsersData$Country <- as.factor(netflixUsersData$Country)
netflixUsersData$Gender <- as.factor(netflixUsersData$Gender)
# netflixUsersData$Plan.Duration <- as.factor(netflixUsersData$Plan.Duration)
# Split the data into training and testing sets
set.seed(123)  # for reproducibility
trainIndex <- createDataPartition(netflixUsersData$Device, p = 0.8,
list = FALSE,
times = 1)
trainData <- netflixUsersData[ trainIndex,]
testData <- netflixUsersData[-trainIndex,]
# Check levels of categorical variables
print(levels(netflixUsersData$Subscription.Type))
print(levels(netflixUsersData$Country))
print(levels(netflixUsersData$Gender))
print(levels(netflixUsersData$Plan.Duration))
# Remove the variable with one level
# Remove the "Plan.Duration" column
netflixUsersData <- subset(netflixUsersData, select = -Plan.Duration)
# Device prediction
# Data preprocessing
# Convert categorical variables to factors
netflixUsersData$Subscription.Type <- as.factor(netflixUsersData$Subscription.Type)
netflixUsersData$Country <- as.factor(netflixUsersData$Country)
netflixUsersData$Gender <- as.factor(netflixUsersData$Gender)
# netflixUsersData$Plan.Duration <- as.factor(netflixUsersData$Plan.Duration)
# Split the data into training and testing sets
set.seed(123)  # for reproducibility
trainIndex <- createDataPartition(netflixUsersData$Device, p = 0.8,
list = FALSE,
times = 1)
trainData <- netflixUsersData[ trainIndex,]
testData <- netflixUsersData[-trainIndex,]
# Check levels of categorical variables
print(levels(netflixUsersData$Subscription.Type))
print(levels(netflixUsersData$Country))
print(levels(netflixUsersData$Gender))
print(levels(netflixUsersData$Plan.Duration))
# Remove the variable with one level
# Remove the "Plan.Duration" column
#netflixUsersData <- subset(netflixUsersData, select = -Plan.Duration)
# Remove variables with only one level
# netflixUsersData <- netflixUsersData[, -c(2)]  # Remove Subscription.Type if it has only one level
# Build the logistic regression model
model <- glm(Device ~ "Subscription.Type", "Country", "Gender", data = trainData, family = "binomial")
# Device prediction
# Data preprocessing
# Convert categorical variables to factors
netflixUsersData$Subscription.Type <- as.factor(netflixUsersData$Subscription.Type)
netflixUsersData$Country <- as.factor(netflixUsersData$Country)
netflixUsersData$Gender <- as.factor(netflixUsersData$Gender)
# netflixUsersData$Plan.Duration <- as.factor(netflixUsersData$Plan.Duration)
# Split the data into training and testing sets
set.seed(123)  # for reproducibility
trainIndex <- createDataPartition(netflixUsersData$Device, p = 0.8,
list = FALSE,
times = 1)
trainData <- netflixUsersData[ trainIndex,]
testData <- netflixUsersData[-trainIndex,]
# Check levels of categorical variables
print(levels(netflixUsersData$Subscription.Type))
print(levels(netflixUsersData$Country))
print(levels(netflixUsersData$Gender))
print(levels(netflixUsersData$Plan.Duration))
# Remove the variable with one level
# Remove the "Plan.Duration" column
#netflixUsersData <- subset(netflixUsersData, select = -Plan.Duration)
# Remove variables with only one level
# netflixUsersData <- netflixUsersData[, -c(2)]  # Remove Subscription.Type if it has only one level
# Build the logistic regression model
model <- glm(Device ~ Subscription.Type, Country, Gender, data = trainData, family = "binomial")
# Device prediction
# Data preprocessing
# Convert categorical variables to factors
netflixUsersData$Subscription.Type <- as.factor(netflixUsersData$Subscription.Type)
netflixUsersData$Country <- as.factor(netflixUsersData$Country)
netflixUsersData$Gender <- as.factor(netflixUsersData$Gender)
# netflixUsersData$Plan.Duration <- as.factor(netflixUsersData$Plan.Duration)
# Split the data into training and testing sets
set.seed(123)  # for reproducibility
trainIndex <- createDataPartition(netflixUsersData$Device, p = 0.8,
list = FALSE,
times = 1)
trainData <- netflixUsersData[ trainIndex,]
testData <- netflixUsersData[-trainIndex,]
# Check levels of categorical variables
print(levels(netflixUsersData$Subscription.Type))
print(levels(netflixUsersData$Country))
print(levels(netflixUsersData$Gender))
print(levels(netflixUsersData$Plan.Duration))
# Remove the variable with one level
# Remove the "Plan.Duration" column
#netflixUsersData <- subset(netflixUsersData, select = -Plan.Duration)
# Remove variables with only one level
# netflixUsersData <- netflixUsersData[, -c(2)]  # Remove Subscription.Type if it has only one level
# Build the logistic regression model
#model <- glm(Device ~ Subscription.Type, Country, Gender, data = trainData, family = "binomial")
model <- glm(Device ~ Subscription.Type + Country + Gender, data = trainData, family = binomial)
# Device prediction
# Data preprocessing
# Convert categorical variables to factors
netflixUsersData$Subscription.Type <- as.factor(netflixUsersData$Subscription.Type)
netflixUsersData$Country <- as.factor(netflixUsersData$Country)
netflixUsersData$Gender <- as.factor(netflixUsersData$Gender)
# netflixUsersData$Plan.Duration <- as.factor(netflixUsersData$Plan.Duration)
# Split the data into training and testing sets
set.seed(123)  # for reproducibility
trainIndex <- createDataPartition(netflixUsersData$Device, p = 0.8,
list = FALSE,
times = 1)
trainData <- netflixUsersData[ trainIndex,]
testData <- netflixUsersData[-trainIndex,]
# Check levels of categorical variables
print(levels(netflixUsersData$Subscription.Type))
print(levels(netflixUsersData$Country))
print(levels(netflixUsersData$Gender))
print(levels(netflixUsersData$Plan.Duration))
# Check unique values of the response variable "Device"
unique(netflixUsersData$Device)
# If there are values outside [0, 1], consider data cleaning or transformation.
# Remove the variable with one level
# Remove the "Plan.Duration" column
#netflixUsersData <- subset(netflixUsersData, select = -Plan.Duration)
# Remove variables with only one level
# netflixUsersData <- netflixUsersData[, -c(2)]  # Remove Subscription.Type if it has only one level
# Build the logistic regression model
#model <- glm(Device ~ Subscription.Type, Country, Gender, data = trainData, family = "binomial")
model <- glm(Device ~ Subscription.Type + Country + Gender, data = trainData, family = binomial)
# Device prediction
# Data preprocessing
# Convert categorical variables to factors
netflixUsersData$Subscription.Type <- as.factor(netflixUsersData$Subscription.Type)
netflixUsersData$Country <- as.factor(netflixUsersData$Country)
netflixUsersData$Gender <- as.factor(netflixUsersData$Gender)
netflixUsersData$Device <- as.factor(netflixUsersData$Device)
netflixUsersData$Plan.Duration <- as.factor(netflixUsersData$Plan.Duration)
# Device prediction
# Data preprocessing
# Convert categorical variables to factors
netflixUsersData$Subscription.Type <- as.factor(netflixUsersData$Subscription.Type)
netflixUsersData$Country <- as.factor(netflixUsersData$Country)
netflixUsersData$Gender <- as.factor(netflixUsersData$Gender)
netflixUsersData$Device <- as.factor(netflixUsersData$Device)
# Split the data into training and testing sets
set.seed(123)  # for reproducibility
trainIndex <- createDataPartition(netflixUsersData$Device, p = 0.8,
list = FALSE,
times = 1)
trainData <- netflixUsersData[ trainIndex,]
testData <- netflixUsersData[-trainIndex,]
# Check levels of categorical variables
print(levels(netflixUsersData$Subscription.Type))
print(levels(netflixUsersData$Country))
print(levels(netflixUsersData$Gender))
print(levels(netflixUsersData$Plan.Duration))
# Check unique values of the response variable "Device"
# unique(netflixUsersData$Device) # If there are values outside [0, 1], consider data cleaning or transformation.
# Remove the variable with one level
# Remove the "Plan.Duration" column
# netflixUsersData <- subset(netflixUsersData, select = -Plan.Duration)
# Build the logistic regression model
model <- glm(Device ~ Subscription.Type + Country + Gender, data = trainData, family = binomial)
# Make predictions on the test set
predictions <- predict(model, newdata = testData, type = "response")
# Convert probability predictions to device classes (e.g., Smartphone, Tablet, Smart TV, Laptop)
predictedDevice <- ifelse(predictions > 0.5, "Smartphone", "Other")
# Evaluate the model
confusionMatrix(table(predictedDevice, testData$Device))
# Device prediction
# Data preprocessing
# Convert categorical variables to factors
netflixUsersData$Subscription.Type <- as.factor(netflixUsersData$Subscription.Type)
netflixUsersData$Country <- as.factor(netflixUsersData$Country)
netflixUsersData$Gender <- as.factor(netflixUsersData$Gender)
netflixUsersData$Device <- as.factor(netflixUsersData$Device)
# Split the data into training and testing sets
set.seed(123)  # for reproducibility
trainIndex <- createDataPartition(netflixUsersData$Device, p = 0.8,
list = FALSE,
times = 1)
trainData <- netflixUsersData[ trainIndex,]
testData <- netflixUsersData[-trainIndex,]
# Check levels of categorical variables
print(levels(netflixUsersData$Subscription.Type))
print(levels(netflixUsersData$Country))
print(levels(netflixUsersData$Gender))
print(levels(netflixUsersData$Plan.Duration))
# Check unique values of the response variable "Device"
# unique(netflixUsersData$Device) # If there are values outside [0, 1], consider data cleaning or transformation.
# Remove the variable with one level
# Remove the "Plan.Duration" column
# netflixUsersData <- subset(netflixUsersData, select = -Plan.Duration)
# Build the logistic regression model
model <- glm(Device ~ Subscription.Type + Country + Gender, data = trainData, family = binomial)
# Make predictions on the test set
predictions <- predict(model, newdata = testData, type = "response")
# Convert probability predictions to device classes (e.g., Smartphone, Tablet, Smart TV, Laptop)
predictedDevice <- ifelse(predictions > 0.5, "Smartphone", "Other")
# Getting an error on Confusion Matrix
length(predictedDevice)
length(testData$Device)
class(predictedDevice)
class(testData$Device)
# Evaluate the model
confusionMatrix(table(predictedDevice, testData$Device))
# Device prediction
# Data preprocessing
# Convert categorical variables to factors
netflixUsersData$Subscription.Type <- as.factor(netflixUsersData$Subscription.Type)
netflixUsersData$Country <- as.factor(netflixUsersData$Country)
netflixUsersData$Gender <- as.factor(netflixUsersData$Gender)
netflixUsersData$Device <- as.factor(netflixUsersData$Device)
# Split the data into training and testing sets
set.seed(123)  # for reproducibility
trainIndex <- createDataPartition(netflixUsersData$Device, p = 0.8,
list = FALSE,
times = 1)
trainData <- netflixUsersData[ trainIndex,]
testData <- netflixUsersData[-trainIndex,]
# Check levels of categorical variables
print(levels(netflixUsersData$Subscription.Type))
print(levels(netflixUsersData$Country))
print(levels(netflixUsersData$Gender))
print(levels(netflixUsersData$Plan.Duration))
# Check unique values of the response variable "Device"
# unique(netflixUsersData$Device) # If there are values outside [0, 1], consider data cleaning or transformation.
# Remove the variable with one level
# Remove the "Plan.Duration" column
# netflixUsersData <- subset(netflixUsersData, select = -Plan.Duration)
# Build the logistic regression model
model <- glm(Device ~ Subscription.Type + Country + Gender, data = trainData, family = binomial)
# Make predictions on the test set
predictions <- predict(model, newdata = testData, type = "response")
# Convert probability predictions to device classes (e.g., Smartphone, Tablet, Smart TV, Laptop)
predictedDevice <- ifelse(predictions > 0.5, "Smartphone", "Other")
# Getting an error on Confusion Matrix
length(predictedDevice) # Length is the same -499
length(testData$Device) # length is the same - 499
class(predictedDevice) # class = Character
class(testData$Device) # Class = factor
# Update class of predictedDevice
predictedDevice <- as.factor(predictedDevice)
# Check
class(predictedDevice) # class = Character
class(testData$Device) # Class = factor
# Evaluate the model
confusionMatrix(table(predictedDevice, testData$Device))
# Device prediction
# Data preprocessing
# Convert categorical variables to factors
netflixUsersData$Subscription.Type <- as.factor(netflixUsersData$Subscription.Type)
netflixUsersData$Country <- as.factor(netflixUsersData$Country)
netflixUsersData$Gender <- as.factor(netflixUsersData$Gender)
netflixUsersData$Device <- as.factor(netflixUsersData$Device)
# Split the data into training and testing sets
set.seed(123)  # for reproducibility
trainIndex <- createDataPartition(netflixUsersData$Device, p = 0.8,
list = FALSE,
times = 1)
trainData <- netflixUsersData[ trainIndex,]
testData <- netflixUsersData[-trainIndex,]
# Check levels of categorical variables
print(levels(netflixUsersData$Subscription.Type))
print(levels(netflixUsersData$Country))
print(levels(netflixUsersData$Gender))
print(levels(netflixUsersData$Plan.Duration))
# Check unique values of the response variable "Device"
# unique(netflixUsersData$Device) # If there are values outside [0, 1], consider data cleaning or transformation.
# Remove the variable with one level
# Remove the "Plan.Duration" column
# netflixUsersData <- subset(netflixUsersData, select = -Plan.Duration)
# Build the logistic regression model
model <- glm(Device ~ Subscription.Type + Country + Gender, data = trainData, family = binomial)
# Make predictions on the test set
predictions <- predict(model, newdata = testData, type = "response")
# Convert probability predictions to device classes (e.g., Smartphone, Tablet, Smart TV, Laptop)
predictedDevice <- ifelse(predictions > 0.5, "Smartphone", "Other")
# Getting an error on Confusion Matrix
length(predictedDevice) # Length is the same -499
length(testData$Device) # length is the same - 499
class(predictedDevice) # class = Character
class(testData$Device) # Class = factor
# Update class of predictedDevice
predictedDevice <- as.factor(predictedDevice)
# Check
class(predictedDevice) # class = Character
class(testData$Device) # Class = factor
# Assuming predictedDevice and testData$Device are both factors or character vectors
confusionMatrix(predictedDevice, testData$Device)
# Evaluate the model
# confusionMatrix(table(predictedDevice, testData$Device))
# You can also use other evaluation metrics to assess the model's performance
# Classificaiton Model Tuning - Device prediction
# Data preprocessing
# Convert categorical variables to factors
netflixUsersData$Subscription.Type <- as.factor(netflixUsersData$Subscription.Type)
netflixUsersData$Country <- as.factor(netflixUsersData$Country)
netflixUsersData$Gender <- as.factor(netflixUsersData$Gender)
netflixUsersData$Device <- as.factor(netflixUsersData$Device)
# Split the data into training and testing sets
set.seed(123)  # for reproducibility
trainIndex <- createDataPartition(netflixUsersData$Device, p = 0.8,
list = FALSE,
times = 1)
trainData <- netflixUsersData[ trainIndex,]
testData <- netflixUsersData[-trainIndex,]
# Check levels of categorical variables
print(levels(netflixUsersData$Subscription.Type))
print(levels(netflixUsersData$Country))
print(levels(netflixUsersData$Gender))
print(levels(netflixUsersData$Plan.Duration))
# Check unique values of the response variable "Device"
# unique(netflixUsersData$Device) # If there are values outside [0, 1], consider data cleaning or transformation.
# Remove the variable with one level
# Remove the "Plan.Duration" column
# netflixUsersData <- subset(netflixUsersData, select = -Plan.Duration)
# Build the logistic regression model
model <- glm(Device ~ Subscription.Type + Country + Gender, data = trainData, family = binomial)
# Make predictions on the test set
predictions <- predict(model, newdata = testData, type = "response")
# Convert probability predictions to device classes (e.g., Smartphone, Tablet, Smart TV, Laptop)
predictedDevice <- ifelse(predictions > 0.5, "Smartphone", "Other")
# Getting an error on Confusion Matrix
length(predictedDevice) # Length is the same -499
length(testData$Device) # length is the same - 499
class(predictedDevice) # class = Character
class(testData$Device) # Class = factor
# Update class of predictedDevice
predictedDevice <- as.factor(predictedDevice)
# Check
class(predictedDevice) # class = Character
class(testData$Device) # Class = factor
# Assuming predictedDevice and testData$Device are both factors  vectors
confusionMatrix(predictedDevice, testData$Device)
# Evaluate the model
# confusionMatrix(table(predictedDevice, testData$Device))
# You can also use other evaluation metrics to assess the model's performance
# Classificaiton Model Tuning - Device prediction
# Data preprocessing
# Convert categorical variables to factors
netflixUsersData$Subscription.Type <- as.factor(netflixUsersData$Subscription.Type)
netflixUsersData$Country <- as.factor(netflixUsersData$Country)
netflixUsersData$Gender <- as.factor(netflixUsersData$Gender)
netflixUsersData$Device <- as.factor(netflixUsersData$Device)
# Split the data into training and testing sets
set.seed(123)  # for reproducibility
trainIndex <- createDataPartition(netflixUsersData$Device, p = 0.8,
list = FALSE,
times = 1)
trainData <- netflixUsersData[ trainIndex,]
testData <- netflixUsersData[-trainIndex,]
# Check levels of categorical variables
print(levels(netflixUsersData$Subscription.Type))
print(levels(netflixUsersData$Country))
print(levels(netflixUsersData$Gender))
print(levels(netflixUsersData$Plan.Duration))
# Check unique values of the response variable "Device"
unique(netflixUsersData$Device) # If there are values outside [0, 1], consider data cleaning or transformation.
# Remove the variable with one level
# Remove the "Plan.Duration" column
# netflixUsersData <- subset(netflixUsersData, select = -Plan.Duration)
# Build the logistic regression model
model <- glm(Device ~ Subscription.Type + Country + Gender, data = trainData, family = binomial)
# Make predictions on the test set
predictions <- predict(model, newdata = testData, type = "response")
# Convert probability predictions to device classes (e.g., Smartphone, Tablet, Smart TV, Laptop)
predictedDevice <- ifelse(predictions > 0.5, "Smartphone", "Other")
# Getting an error on Confusion Matrix
length(predictedDevice) # Length is the same -499
length(testData$Device) # length is the same - 499
class(predictedDevice) # class = Character
class(testData$Device) # Class = factor
# Update class of predictedDevice
predictedDevice <- as.factor(predictedDevice)
# Check
class(predictedDevice) # class = Character
class(testData$Device) # Class = factor
# Assuming predictedDevice and testData$Device are both factors  vectors, We can evaluate
confusionMatrix(predictedDevice, testData$Device)
# You can also use other evaluation metrics to assess the model's performance
subscription_counts <- netflixUsersData %>%
group_by(`Subscription.Type`) %>%
summarize(Count = n())
subscription_counts <- netflixUsersData %>%
group_by(`Subscription.Type`) %>%
summarize(Count = n())
total_users <- sum(subscription_counts$Count)
subscription_counts <- subscription_counts %>%
mutate(Percentage = (Count / total_users) * 100)
print(subscription_counts)
# User subscription type breakdown by country
# Group by Country and Subscription Type and count users
subscription_count <- netflixUsersData %>%
group_by(Country, `Subscription.Type`) %>%
summarize(Count = n()) %>%
ungroup()
ggplot(subscription_count, aes(x = Country, y = Count, fill = `Subscription.Type`)) +
geom_bar(stat = "identity", position = "stack") +
theme_minimal() +
labs(title = "Country and Subscription",
x = "Country",
y = "Count") +
theme(legend.position = "top") +
coord_flip() +
guides(fill = guide_legend(reverse = TRUE))
